import locale
from datetime import datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery

from app.database import requests as rq
from app.keyboards import type_of_manic, send_number, confirmation, new_entry, yes_no, grey_button, grey_and_green_button, already_entry
from app.google_calendar.google_calendar_manager import calendar

locale.setlocale(locale.LC_TIME, 'uk_UA')

user = Router()


class Registration(StatesGroup):
    name = State()
    number = State()
    insta_name = State()


class Record(StatesGroup):
    date = State()
    id_event = State()
    time = State()
    category = State()
    comment = State()
    final = State()


@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await rq.add_user(message.from_user.id)
    if not user:
        await message.answer("–ü—Ä–∏–≤—ñ—Ç üëãüèª\n\n–í–≤–µ–¥–∏ —Å–≤–æ—î —ñ–º'—è")
        await state.set_state(Registration.name)
    else:
        await message.answer("–¢–∏ –º–æ–∂–µ—à –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω—ñ–≥—Ç–∏–∫–∏ –Ω–∞–∂–∞–≤—à–∏ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É)", reply_markup=new_entry)


@user.message(Registration.name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.number)
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —Å–≤—ñ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É", reply_markup=send_number)


@user.message(Registration.number, F.contact)
async def get_number(message: Message, state: FSMContext):
    await state.update_data(number=message.contact.phone_number)
    await state.set_state(Registration.insta_name)
    await message.answer("–í–∫–∞–∂–∏ —Å–≤—ñ–π –Ω—ñ–∫ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º", reply_markup=ReplyKeyboardRemove())


@user.message(Registration.insta_name)
async def get_insta_name(message: Message, state: FSMContext):
    await state.update_data(insta_name=message.text)
    user = await state.get_data()
    await rq.edit_user(message.from_user.id, user['name'], user['number'], user['insta_name'])
    await message.answer("–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ\n\n–©–æ–± –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω—ñ–≥—Ç–∏–∫–∏, –∂–º–∏ –∫–Ω–æ–ø–∫—É)", reply_markup=new_entry)
    await state.clear()


@user.message(F.text == '–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å')
async def cancel_record_question(message: Message):
    rec = await rq.get_user_rec(message.from_user.id)
    if rec:
        time = rec.date_time.strftime('%d.%m %A %H:%M')
        await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {time} \n\n—Ç–æ—á–Ω–æ –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Å?", reply_markup=yes_no)
    else:
        await message.answer("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ—Ç–∞–∫", reply_markup=new_entry)


@user.message(F.text == '–¢–∞–∫')
async def cancel_record(message: Message):
    rec = await rq.get_user_rec(message.from_user.id)
    calendar.update_event_color(rec.id_event, "10", " ")
    await rq.delete_user_rec(message.from_user.id)
    await message.answer("–ó–∞–ø–∏—Å –≤—ñ–¥–º—ñ–Ω–µ–Ω–æ", reply_markup=new_entry)


@user.message(F.text == '–ù—ñ')
async def new_record(message: Message, state: FSMContext):
    rec = await rq.get_user_rec(message.from_user.id)
    time = rec.date_time.strftime('%d.%m %A %H:%M')
    await message.answer(f"–¢–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {time}", reply_markup=new_entry)


@user.message(F.text == '–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è')
async def new_record(message: Message, state: FSMContext):
    rec = await rq.get_user_rec(message.from_user.id)
    if not rec:
        await message.answer("–í–∏–±–µ—Ä–∏ —â–æ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ (—ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ–≥–æ)", reply_markup=type_of_manic)
        await state.set_state(Record.category)
    else:
        time = rec.date_time.strftime('%d.%m %A %H:%M')
        await message.answer(f"—Ç–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ {time}", reply_markup=already_entry)


@user.message(F.text == '–ø–µ—Ä–µ–Ω–∞—Ä–æ—â–µ–Ω–Ω—è (450–≥—Ä–Ω)')
@user.message(F.text == '–Ω–∞—Ä–æ—â–µ–Ω–Ω—è (400–≥—Ä–Ω)')
async def get_date(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω: ", reply_markup=await grey_button())
    await state.set_state(Record.date)


@user.message(F.text == '–∑–Ω—è—Ç—Ç—è + —á–∏—Å—Ç–∫–∞ + —É–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (380/400–≥—Ä–Ω)')
@user.message(F.text == '–∑–Ω—è—Ç—Ç—è + —á–∏—Å—Ç–∫–∞ (250–≥—Ä–Ω)')
async def get_date(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–∏–±–µ—Ä–∏ –æ–¥–Ω—É —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≥–æ–¥–∏–Ω: ", reply_markup=await grey_and_green_button())
    await state.set_state(Record.date)


@user.callback_query(F.data.startswith('kl_'))
async def get_category(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.update_data(date=callback.data.split('_')[1])
    await state.update_data(time=callback.data.split('_')[1][11:16])
    await callback.message.answer(
        "–Ø–∫—â–æ —Ç–∏ –±–∞–∂–∞—î—à –¥–∏–∑–∞–π–Ω - –Ω–∞–ø–∏—à–∏ \"+\"  \n–Ø–∫—â–æ —Ç–∏ –±–∞–∂–∞—î—à –±–µ–∑ –¥–∏–∑–∞–π–Ω—É - –Ω–∞–ø–∏—à–∏ \"-\"",
        reply_markup=ReplyKeyboardRemove())
    await state.set_state(Record.comment)


@user.message(Record.comment)
async def get_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text)
    rec = await state.get_data()
    time = datetime.fromisoformat(rec['date']).strftime('%d.%m %A %H:%M')
    await message.answer(f"–¢–≤—ñ–π –∑–∞–ø–∏—Å –Ω–∞ {time} ,\n\n–ë—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏ {rec['category']}\n\n–î–∏–∑–∞–π–Ω: {rec['comment']} ",
                         reply_markup=confirmation)
    await state.set_state(Record.final)


@user.message(Record.final)
async def get_final(message: Message, state: FSMContext):
    user_info = await rq.get_user(message.from_user.id)
    rec = await state.get_data()
    time = datetime.fromisoformat(rec['date']).strftime('%d.%m %A %H:%M')
    id_event = calendar.get_event_id_by_start_time(rec['date'].replace(' ', 'T'))
    if await rq.get_audit(rec['date']):
        await rq.add_rec_to_new_table(message.from_user.id, rec['date'], id_event)
        calendar.update_event_color(event_id=id_event,
                                    color_id="11",
                                    summary=f"{user_info.name}, +{user_info.number}, {user_info.insta_name} ,{message.from_user.id},\n\n —Ç–∏–ø —Ä–æ–±–∏—Ç–∏ {rec['category']}\n\n–∫–æ–º–µ–Ω—Ç–∞—Ä: {rec['comment']}")
        await message.answer(f"–ß–µ–∫–∞—Ç–∏–º—É —Ç–µ–±–µ {time}", reply_markup=new_entry)
        await state.clear()
    else:
        await message.answer("–ù–∞ –∂–∞–ª—å —Ö—Ç–æ—Å—å –∑–∞–ø–∏—Å–∞–≤—Å—è —à–≤–∏–¥—à–µ –∑–∞ —Ç–µ–±–µ üò¢\n–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑)", reply_markup=new_entry)
